Rustbyexample + Rust book


https://doc.rust-lang.org/1.0.0/book/README.html

Cargo helps managing
 - building your code
 - downloading the dependencies your code needs
 - building those dependencies
 
Cargo-ify a project:
 - make cargo config file -> TOML file
 - put source file in the right place -> src folder
 - Cargo expects source files to live in a src directory
 - top level for other things, not related to code
 - create TOML file 
	- TOML: aims to be minimal configuration file format, easy to read
	- designed to map unambiguously to a hash table
	- should be easy to parse into data structures in a wide variety of languages
 - build project and run with: $ cargo run
	- new file created: Cargo.lock
		- keeping track of dependencies in your application
 - start new project with Cargo: $ cargo new hello_world -- bin
 
 main function: beginning of every Rust program
 indentation with four spaces rather than tabs
 macros really different from C macros
 Rust: expression oriented language: most things expressions rather than statements
   -> expression which returns a value -> also true for functions, the last expr automatically returned
 
 use std::io
  - import io library from the standard library
 empty tuple () -> return type of main fn
 
 let:
  - used to create var bindings
  - var bindings: immutable by default
  - keyword mut: makes a binding mutable rather than immutable
  - accepts "pattern" on left-hand side
  
 String: growable, UTF-8 encoded bit of text
 ::new()- "associated function" of a particular type
  - associated with String itself rather than a particular instance of a string
  ~ static method
  - new() -> creates new empty instance of some type
  
 io::stdin() -> calling associated function on imported package
 
 Methods: like associated functions but only available on a particular instance of a type
 
 Result type:
  encode error handling information
  different methods defined on them
  use returned result type for error handling
 
crate: package of Rust code
"dependencies" section of Cargo.toml -> like the "package" section 
 - declaring dependies on external version + version you require
traits: methods defined on traits, for the method to work -> needs the trait to be in scope
.cmp() method -  called on anything that can be compared + takes reference to the thing you want to compare it to
:: used for indicating namespace for a particular enum variant
  
Rust: strong, static type system + type inference

.ok().expect("error message") for error handling
allowed to shadow variable e.g. when conversion of the value of a var
 -> re-use variable name
variable: t -> annotate type of the var
loop : infinite loop (end with break)

error handling by using match statement
	Result returned -> Enum, each variant some data associated with it
	
working with a type which owns its data easier than working with one that uses references

struct -> representing an entity type
<impl> block -> define things like associated functions  on the struct

structure of function: 
	fn name(param: type, ...) -> return_type { ...}

Vec<T> : vector, growable array type
methods taking explicit self parameter 
    -> new() associated function because has no self
	-> eat() method -> because takes self

use: brings names into scope
	
Concurrency in Rust
  - making new threads -> return some handles to those threads that let us control their operation
	-> need to explicitly annotate type 
  - calling into_iter() on vector -> iterator that takes ownership of each philosopher
  - call map on iterator -> takes closure as an argument and calls that closure on each elem in turn
  - thread::spawn(...) -> takes a closure as an argument and executes that closure in a new thread
		- need extra annotation, move, to indicate that the closure is going to take ownership of the values it's capturing
  - mutex: way to control concurrency : only on thread can access the contents at once
  _var-name -> telling Rust that result value just has to be acquired and not used -> no warning

 
The Stack and the Heap
	- stack: very fast, memory allocated there by default; but allocation local to a function call, limited in size
	- heap: slower, explicitly allocated by program, effectively unlimited in size, globally accessible
	
	The Stack
		- stack allocate by default i.e. basic values on the stack
			- function called -> memory allocation for all of its local variables and other information -> "stack frame"
			- function returns -> stack frame deallocated
			-> really fast but cannot keep values around if needed for longer than a single function
			edition 2.0
			- LIFO stack
			- fast because memory access always from the top + all data on stack must take up a known, fixed size
			
	The Heap
		- allocate memory on heap with Box<T> type
			- actual value of box: structure which has a pointer to the heap 
				-> allocate memory for the heap and put value there
			- jemalloc : memory allocator for heap
			- function over -> Drop implementation for Box<T> -> deallocates memory that was allocated when it was created
				-> then stack frame goes away, freeing all memory
			- make memory live longer by transferring ownership
			from edition 2.0
			- for data with size unknown at compile time or a size that might change
			- less organized: OS finds empty spot big enough for data, marks it as being in use and returns pointer -> allocating memory
				-> pointer stored on the stack (fixed size)
			
	Arguments and borrowing
		- stack frames not only for local bindings but also arguments
		- value of a reference: pointer to a memory location -> borrowing a variable not deallocatign any memory
	
	Rust compared to other languages
		- most with garbage collection -> heap allocating by default i.e. every value boxed
		- Stack-allocation : only LIFO semantics for reclaiming storage
		- heap-allocation: allowing storage to be taken from and returned to the pool in arbitrary order, at a complexity cost
	Default stack allocation in Rust
		- Runtime efficiency: 
			- memory management with stack: trivial
		- semantic impact:
			- LIFO semantics
		

 
 https://doc.rust-lang.org/book/second-edition/ch03-00-common-programming-concepts.html
 
 Common Programming Concepts
 
	Variables and Mutability
	- variables immutable by default -> advantage of safety and easy concurrency
	- compile time errors when trying to change an immutable variable 
	- keyword "mut" in front of variable name -> mutable
	- big data structures -> maybe better to mutate, smaller data structure -> maybe no mutation but clarity
	- "const" keyword for constants, type of the value must be annotated, can only be set to constant expressions
	- constants valid for the entire runtime of a program within their scope
	- use of hardcoded values -> maintenance, only one place to change
	- Shadowing
		- declare new variable with same name as previous variable 
		-> by using the same variable name and repeating the use of "let"
		!= mutation
		- lets us use the same var name but with different type
	
	Data Types
	- Rust: statically typed (must know the types of all variables at compile time)
	- normally can infer types but then not possible, type annotation necessary
	- Scalar types: representing single values
		- integers
		- floating-point numbers
		- booleans 
		- characters
		- i : signed, u : unsigned
	- Compound Types: group multiple values of other types into one type, two primitive compound types:
		- tuple : general way of grouping some number of other values with a variety of types into one compound type
			- use patttern matching to destructure tuple var -> get individual values of a tuple
			- or access by indexing
		- arrays: every elem with same type
			- fixed length
			- data allocated on stack
			- trying to access an index past the end of the array -> runtime error (Rust panics) because Rust checks if index < length 
				-> no invalid memory can be accessed
				-> immediately exiting -> memory safety ensured
	
	Functions
	- snake case: all letters are lowercase and underscores separate words
	- "fn" keyword for functions
	- must declare the type of each param in function signatures
	- statements: instructions that perform some action and do not return a value
		e.g. assigning a value with the let keyword e.g. let x = (let y = 6) not possible because let not returning value -> no value x can be bound to
	- expression: evaluate to a resulting value
	- add semicolon to end of expression -> statement
	- return value = value with the final expression in the block of the body of the function
	
	Control Flow
	- always boolean in condition
	- multiple conditions with else if possible -> maybe match would be more appropriate
	- 3 kinds of loops: loop, while, for
		- loop: infinite loop, has to be stopped explicitly with break
		- for e in array { ... } or for n in (1...x) { ... } (use range for doing something a number of times)
	
Ownership
	- Rusts most unique feature -> make memory safety guarantees without a garbage collector
	- memory managed trough a system of ownership with a set of rules that the compiler checks at compile time -> no run-time costs
	- addresses: minimize duplicate data on heap, cleaning up unused data on the heap
	Rules
		- Each value in Rust has a variable that's called its owner.
		- There can be only one owner at a time.
		- When the owner goes out of scope, the value will be dropped.
	Variable Scope
		- scope: range within a program for which an item is valid
		- When variable s comes into scope, it is valid.
		- It remains so until it goes out of scope.

	Datatype String (heap-allocated)
		- stores amount of text unknown to us at compile time 
		- :: - operator for namespacing a function under a specific type
		
	Memory and Allocation
		- for mutable, growable structures:
			- Memory must be requested from the OS at runtime.
			- We need a way of returning this memory to the OS when done with the data.
				- Problems: freed too late -> waste memor, freed too early -> invalid var, done twice -> bug
		- handled in Rust:
			- memory automatically returned when var goes out of scope
				-> Rust calls function Drop automatically when var goes out of scope
		
		e.g.
		let s1 = String::from("hello");
		let s2 = s2;
		
		-> s2 has a copy of the pointer, length and capacity
		-> when s1 and s2 go out of scope -> both trying to clean the memory -> double free error
			-> Rust's solution: s1 no longer valid -> not necessary to free it
			-> called "move": s1 was moved to s2, i.e. not only pointer, length and capacity copied but also former variable invalidated
			-> Rust never automatically creating "deep" copies of data
				-> any automatic copying assumed inexpensive i.t.o. runtime performance
		- for deep copy (heap data / shallow copy: stack data) -> method "clone"
		
		- types like integers: known size at compile time -> stored entirely on stack 
			-> no difference between deep/shallow copy
		    -> "Copy" trait: older variable still usable after assignment
				- trait cannot be implemented if also "Drop" trait implemented
			-> all scalar types
	
	Ownership and Functions
		- passing a var to a function will move or copy, just like assignment
		
	Return values and scope
		-> references
		
	Pattern for ownership of a variable:
		 - assigning value to another var -> move
		 - when var including heap data out of scope -> cleaned up by drop
			unless data has been moved to be owned by another var
	
	References and Borrowing
		- & operator: reference	
			-> allow to refer to some value without taking ownership of it
		- not owning it -> value it points to will not be dropped when reference goes out of scope
		- signature of the function using & -> indicating that expecting a reference as a parameter
			-> no need to return values in order to give back ownership
		- borrowing: having references as function parameters 
		- references: immutable by default
		Mutable References
		- give mut &s as argument, and declare &mut <T> in function signature as parameter type
		  <- var that is referred to must be mutable as well
		  -> restriction: only one mutable reference to a particular piece of data in a particular scope allowed 
			-> prevents data races at compile time
			data race:
			- Two or more pointers access the same data at the same time.
			- At least one of the pointers is being used to write to the data.
			- There's no mechanism being used to synchronize access to the data.
		- use curly brackets to create scopes -> allowing for multiple mutable references, just not simultaneous ones
		- not possible to have mutable reference while having an immutable one
		- multiple immutable references: ok
		
		Dangling References:
		- guaranteed that references never be dangling pointers
		- reference to some data -> ensured that data won't go out of scope until reference to the data does
	
	The Rules of References
		- At any given time, you can have either but not both of:
			- one mutable reference
			- any number of immutable references.
		- References must always be valid.

Slices
	- let you ref a contiguous sequence of elems in a collection rather than the whole collection
	- String slice: reference to part of a String, e.g. s  = String... -> let hello = &s[0..5]
		-> &var_name[starting_index.. ending_index] - former inclusive, latter exclusive
		- &str: immutable reference
		- string literals' type: &str -> that's why immutable
		
Summary
	- concepts of ownership, borrowing and slices -> ensuring memory safety at compile time
		
Using Structs to structure related data
	- field init shorthand - variables with same names as struct fields -> initialize fields with the values of the according variables
	struct update syntax: initialize fields and then: ..user1 for taking the values of user1 for the rest of the fields of user2
	- tuple structs without named fields to create different types
		- definition: struct Struct_Name(<T>,<T>,...);
	- Ownership of struct data:
		- possible for structs to store references to data owned by something else but do so requires the use of lifetimes
		- Lifetimes ensure that the data referenced by a struct is valid for as long as the struct is
		
	Methods and Syntax
	...

Enums and Pattern Matching
	- defining a type by enumerating its possible values
	- e.g. <Option>: value can either be something or nothing
	- pattern matching with match expression -> different code on different values of an enum
	- enum data can only be one of the variants of an enum type
	- data can directly be associated to variants
	- different types in enum, also with different associated data for each variant possible
	- also possible to define methods on structs
	
The match Control Flow Operator
	- compare a value against a series of patterns and then execute code based on which pattern matches
	- patterns: literal values, variable names, wildcards,...
		-> expressiveness of patterns + compiler checks making sure all possible cases handled
	- difference to if: if needs boolean as condition, in match could be any type
	- match arm: pattern and some code
	- compares resulting value against pattern of each arm, in order
	- code associated with each arm: expression -> resulting value of expression of the matching arm: return value for the entire match expression
	- another feature of match arms: can bind to parts of the values that match the pattern -> extract values out of enum variants
		-> add variable to the pattern that matches the values of the specific variant
	- combining enums and match -> very useful in many situations, common pattern in Rust code
		-> match against an enum, bind a variable to the data inside, execute code based on it
		-> consistently a user fav, not common in all languages
		-> like type-case
	- matches in rust: exhaustive -> must exhaust every last possibility in order for the code to be valid
		-> compiler recognizes when not exhausting all the poss matches
	- _ placeholder -> like an else in type-case
		- matches any value -> matches all the possible cases that aren't specified before if put as the last case
		
Control Flow with if let
	- if + let -> handle values that match one pattern and ignore the rest
	- if let ... else ... : else block -> same code as in match with _ case
	
Error Handling
	- error categories: 
		- recoverable: report problem to user and retry
		- unrecoverable: symptoms of bugs
	- instead of exceptions: value Result <T,E> for recoverable errors
	- panic! macro for unrecoverable errors
	

split program in main.rs and lib.rs
parsing arguments and call "run", error handling in main 
library functions in run
Error handling with returning Result type, Ok(return_value) for success, Err(message) for failure
.unwrap_or_else() at function call to get value wrapped in Ok or to get Error message
data that is related -> put in complex data structure with concrete names for easier maintenance + implement funtions for it
if let (result not important)/unwrap_or_else (result can be used further) for error handling
use statements -> import:
	use std::error::Error;
	use std::fs::File;
	use std::io::prelude::*; 
for error handling, working with IO and files
modularity by splitting main and library -> testing easier
lifetime parameter: which argument lifetime is connected to the lifetime of the return value
-> connect argument with value if value takes some parts of the argument 
	-> telling Rust that data returned by the function will live as long as the data passed into the search function in the argument
	-> data referenced by a slice needs to be valid i.o. for the reference to be valid
lines method -> iterator -> good for loop with iterator for running some code on each item in a collection
refactoring each little bit
TDD -> write test, write code to pass it, refactor

environment variables
functions like to_lower_case -> creating new data rather than referencing existing data
field for environment variable in the Config struct
env::var function -> pass name of the environment variable and get back Result
is_err method -> check if error -> unset -> here: case_insensitive search, otherwise is_err returns false (because variable is set so gets back Ok-variant) -> here: case sensitive
use std::env; -> features for dealing with env vars

Writing Error Messages to Standard Error instead of Standard Output
standard error -> for error messages
eprintln! macro -> prints to the standard error stream

Generic Types, Traits and Lifetimes
generics: abstract stand-ins for concrete types or other properties
	-> more flexible, less redundancy
traits: way to define behavior in a generic way
	-> combined with Generics -> constrain a generic type to those types that have a particular behavior
lifetimes: kind of generic	-> information about how references are related to each other
		-> allow us to borrow values in many situations and still have the compiler check that references will be valid
		
	Generic data types
	- type parameter name in a function signature -> declare type parameter name in angle brackets between the name of the function and the parameter list
		e.g. fn largest<T>(list: &[T]) -> T {...}
	- generic type parameter in one or more of the struct's field e.g.
		struct Point<T> {x:T, y:T,} -> x,y of same type
		struct Point<U> {x:T, y:U,} -> x,y different type (but can be the same)
	- enums -> can also hold generic data types in their variants
		e.g. enum Option<T>{Some(T), None,} or enum Result<T,E>{Ok(T), Err(E),}
	- in method definitions: impl<T> Point<T> {...}
		-> declaring directly after impl: compiler knows there is a generic type rather than concrete
		- other type parameters used than in struct -> go after fn because only relevant to function
	Rust uses monomorphization: process of turning generic code into specific code with the concrete types that are actually filled in
	
	Traits: Defining Shared Behavior
	- abstract over behavior that types can have in common
	- behavior of a type = methods we can call on that type
	- traits: way to group method signatures together -> define set of behaviors to accomplish some purpose
	- declare trait with "trait keyword"
	- inside trait: declare method signatures that describe the behaviors that types that implement this trait need to have
	- each type implementing that trait -> provide own custom behavior for the body of the method
	- implementing trait on type: similar to implementing methods
		difference: after impl -> put trait name to be implemented, then say for and the name of type that we want to implement the trait for
		e.g. impl Summarizable for NewsArticle {...}
		restriction: implement a trait on a type as long as either the trait or the type are local to our crate 
			-> not allowed to implement external traits on external types -> "orphan rule"
	- default implementation -> default behavior for some or all of the methods in a trait	
		-> implementing trait on particular type -> choose to keep or override each method's default behavior
			- keep -> use default implementation: implement empty impl block or simply nothing
			- override -> implement custom method
		-> default implementations allowed to call other methods in the same trait
		-> providing lot of useful functionality
		- not possible to call default implementation from overriding implementation
		
	Trait bounds: traits used with generic type parameters -> constraining generic types
		-> ensuring that type given that implements a particular trait and show corresponding behavior
		e.g. pub fn notify<T: Summarizable>(item T){...}
		- specifying multiple trait bounds with "+"
		e.g. fn some_function<T: Display + Clone, U: Clone + Debug>(t: T, u: U) -> i32 {...}
		- more readable with "where":
		e.g. fn some_function<T, U>(t: T, u: U) -> i32
				where T: Display + Clone,
						U: Clone + Debug
			{...}
		- using trait bound with an impl block using generic type parameters -> conditionally implement methods only for types that implement the specified traits
		- also conditionally implement a trait for any type that implements a trait
		- blanket implementation: implementations of a trait on any type that satisfies the trait bounds
		
	Lifetimes: ensuring that references are valid as long as we need them to be
		- lifetime: scope for which that reference is valid
		- sometimes necessary to annotate relationships using generic lifetime parameters -> enrure the actual reference used at runtime will be valid
		- main goal: prevent dangling references
		- uninitialized pointers cannot be used
		- borrow checker: compares scopes to determine that all borrows are valid
		
		Generic lifetimes in functions
		e.g. fn first_word<'a>(s: &'a str) -> &'a str 
		- generic lifetime parameter -> functions can accept references with any lifetime
		 -> relate the lifetimes of multiple references to each other
		- lifetime annotation: names of lifetime params must start with ', lowercase, short
		&i32        // a reference
		&'a i32     // a reference with an explicit lifetime
		&'a mut i32 // a mutable reference with an explicit lifetime
		two parameters with same lifetime annotation -> both live as long as the same generic lifetime
			-> generic lifetime 'a will get the concrete lifetime = min(lifetimes of the two variables passed in as arguments)
		generic lifetime parameters -> any values not adhering to this contract -> rejected by borrow checker
		annotation of lifetimes only in function signature (params and return value)
		returning a reference from a function -> lifetime param of return type needs to match lifetime param of one of the arguments
		ocnnecting lifetimes of various arguments and return values of functions
			-> enough information to allow memory-safe ops and disallow ops that would create dangling pointers or otherwise violate memory-safety
			
		Lifetime Annotations in Struct Definitions
		- structs holding references <- lifetime annotation on every reference in the struct's definition
		- declare lifetime param: struct ImportantExcerpt<'a>{...}
		
		Lifetime ellision rules
		- input lifetimes: lifetimes on function or method parameter
		- output lifetimes: lifetimes on return values
		1) each param that is a reference gets its own param
		2) There is exactly one input lifetime param -> lifetime assigned to all output lifetime param
		3) THere are multiple lifetime params but one of them is &self or &mut self -> lifetime of self assigned to all output lifetime params
		
		Static Lifetime 'static
		- entire duration of program
		- e.g. all string literals have static lifetime
		
		
Handling concurrency in Rust
		- concurrent programming: different parts of a program executed independently
		- parallel programming: different parts of a program executing at the same time
		- Message passing concurrency: channels used to send messages between threads
		- shared state concurrency: multiple threads have access to some piece of data
		- Sync, Send traits 
		
		Using threads
		- process: context in which the OS runs code
		- thread: independent parts of the program that run simultaneously within the context of the program
		- race conditions: thread accessing data or resources in inconsistent order, deadlocks where two threads both prevent each other from continuing, bugs only happening in certain situations
		- OS APIs to create threads: 1:1, one OS thread per one language thread
		- programming language provided threads (lightweight/green thread): M:N, M green threads per N OS threads
		- std library of Rust: only 1:1 threading
		
		- Create new thread with "spawn" e.g.
		thread::spawn(|| {
        for i in 1..10 {
            println!("hi number {} from the spawned thread!", i);
        }
		- waiting for all threads to finish using join handles
		guarantee that the spawned thread will get to run at all <- saving the return value of thread::spawn which is a JoinHandle
		
		use std::thread;

		fn main() {
			let handle = thread::spawn(|| {
				...
			});

			for i in 1..5 {
				...
			}

			handle.join();
		}
		
		- JoinHandle: owned value that can wait for a thread to finish -> done by join method
		- calling join on the handle -> current thread will block until the thread that the handle represents terminates
		- using move closures with Threads
		- creating closures that capture values from their environment mostly used in the context of starting new threads
		- i.o.t. use data in the spawned thread that comes from the main thread -> spawned threat's closure must capture the values it needs
		- closure using variable -> closure capturing var and making it part of the closure's environment -> thread::spawn runs closure in new thread -> access var inside that new thread
		- captuing something in closure's env. -> rust inferring how to capture it -> only reference needed -> borrow -> problem: don't know how long the spawned thread will run, so not knowing if the reference to var will always be valid!
			-> use "move" keyword to force a closure to take ownership of the values it uses e.g.
			let handle = thread::spawn(move || {
			println!("Here's a vector: {:?}", v);
    }		);
		
		Message Passing to transfer data between threads
		- "Do not communicate by sharing memory, instead, share memory by communicating"
		- channel: has two halves, a transmitter and a receiver
			-> one part of code: call methods on the transmitter with the data we want to send
			-> other part: check the receiving end for messages
		- mpsc:channel function -> creates new channel
			- return values: tuple with sending end and receiving end
		- mpsc (multiple producer, single consumer): multiple sending ends of a channel producing values, only one receiver consuming those values
		- put transmitter in closure of thread -> use send method -> takes value down the channel
			- return Result type
		- receiver (remained in main thread) -> useful methods:
			- recv: receive - block execution until a value is sent down the channel, return Result<T,E>
			- try_recv: not blocking, instead returning Result<T,E> immediately
		- once value sent to another thread -> not available afterwards anymore since send takes ownership of its param, moves value -> value owned by receiver
		- message passing ~= single ownership in Rust -> preventing data race
		- sending multiple messages per iterator over some data -> send in each iteration -> treat receiver like iterator -> when channel closed -> iteration ends
		- create multiple threads that all send values to the same receiver -> clone the transmitting half of the channel
	
	Shared State Concurrency
	- mutex (mutual exlusion): concurrency primitve for sharing memory
		- only allows one thread to access some data at any given time
	- have to attempt to acquire the lock before using the data und unlock the data after use
	API of mutex:
		- Mutex::new(..) -> create mutex
		- lock method -> acquire lock -> block until it's our turn to have the lock
		- once acquired lock -> treat the return value as a mutable reference to the data inside
		- Mutex<T>: smart pointer or rather call to lock returns smart pointer called MutexGuard
			- implement Deref to point at our inner data
			- Drop implementation for releasing the lock -> lock released when MutexGuard goes out of scope
			- providing interior mutability
	- Arc<T>: atomic reference counted type
		- atomics working like primitive types but safe in concurrent situations
		- wrap mutex in Arc<T> -> share ownership across multiple threads
	- NOT prevented by Rust: reference cycles/deadlocks
	
	Extensible Concurrency with Sync and Send Traits
	- marker traits -> no behavior to implement
	- Send for indication Ownership may be transferred to another thread
		- almost every type in Rust implements it except e.g. Rc<T>
		- any type composed of Send types -> marked as Send automatically 
	- Sync for indicating that a type is safe to have references to a value from multiple threads
		i.e. for any type T, T is Sync if &T (a reference to T) is Send 
		- primitive types: Sync, types composed entirely of Sync types automatically sync as well
		- Implementing Send and Sync -> unsafe
	
Closure: Anonymous functions that can capture the environment
		- closures in Rust: anonymous functions, save in a var or pass as arg to other functions
		- create closure in one place and call in another
		- allowed to capture values from the scope in which they are called
		- enables to specify some code in one place in our program but then only execute code if actually needed the result
		- define closure -> store closure in a variable (can move whole body of the function into closure)
		- definition of closure: |param1,...,paramn| {...}
		- closures in comparison to functions
			- closures not requiring annotation of types of the params or the return value
				- not used in exposed interface but rather anonymous functions (in variables)
				- only relevant within narrow context ->automatic type inference possible
				- first time types inferred for param and return value -> types locked into the closure
		- struct containing closure and value of closures once evaluated
			- value field of type Option<E>	
				- before executing closures: None
				- after executing closure: store result in Some variant
		- each closure: own unique anonymous type
		- all closures implement one of the traits Fn, FnMut or FnOnce
		- field for closure of generic type T: Fn trait bound on on T specifying that T is a closure (signature given)
		- can capture their environment and access variables from the scope in which they are defined
			- three ways of capturing environment: taking ownership, borrowing immutably, borrowing mutably
				- FnOnce: takes ownership of variables it captures from its enclosing scope
				- Fn: borrows value from environment immutably
				- FnMut: mutably borrows values
				<- implicitly inferred by Rust based on how the closure uses the values from the environment
				- force closure to take ownership -> move keyword before param list
				
		Iterators
			- responsible for logic around iterating over each item in the seq and determining when the seq has finished
			- in Rust: iterators - lazy
			- Iterator trait:
				- requires defining an Item type -> used in the return type for the next method
				- next method: returns one item of the iterator at a time wrapped in Some, and when iteration over, returning None
					- returns immutable references to the values in the iterated data 
					-> iter method producing an iterator over immutable references
				- consuming adaptors: methods calling the next method (using up the iterator)
				
				
			
		
		
